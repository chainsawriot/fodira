#!/usr/bin/env Rscript

## install.packages(c("tidyRSS", "purrr", "dplyr"))

args <- commandArgs(trailingOnly=TRUE)
csv <- args[1]
output_filename <- args[2]
debug <- args[3]
## for debug
##csv <- "rss_list_complete.xlsx"
##csv <- "rss_list.csv"
#debug <- "12"

library(magrittr)
input <- rio::import(csv)

.silent_parse <- function(url, id = NA, debug = NA) {
    if (!is.na(debug)) {
        message(url)
    }
    suppressMessages(res <- tidyRSS::tidyfeed(url))
    res$id <- id
    res$url <- url
    if (!"item_pub_date" %in% colnames(res)) {
        res$item_pub_date <- NA
    }
    return(res)
}

res <- purrr::map2(input$url, input$page, purrr::safely(.silent_parse), debug = debug)

## input$url[purrr::map_lgl(res, ~!is.null(.$error))]

## res %>% purrr::map("error")

## input$url[19]

## res %>% purrr::discard(~!is.null(.$error)) %>% purrr::map("result") %>%  purrr::discard(~"item_pub_date" %in% colnames(.)) -> error_stuff

res %>% purrr::discard(~!is.null(.$error)) %>% purrr::map("result") %>% purrr::map(~dplyr::select(., dplyr::any_of(c("id", "item_link", "item_title", "item_pub_date", "item_description")))) %>% dplyr::bind_rows() -> valid_links

valid_links %>% dplyr::rename(pub = `id`, link = `item_link`, pubdate = `item_pub_date`, title = `item_title`, description = `item_description`) -> output

if (!is.na(output_filename)) {
    saveRDS(output, output_filename)
} else {
    output
}
